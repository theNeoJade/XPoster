export type Simplify<T> = {} & {
    [P in keyof T]: T[P];
};
export type StrictUnion<T> = CombineUnion<T> extends infer U ? T extends any ? Simplify<T & {
    [K in Exclude<keyof U, keyof T>]?: undefined;
}> : never : never;
export type CombineUnion<T> = Pick<T, keyof T> & Partial<(T extends any ? (x: T) => any : never) extends (x: infer U) => any ? U : never>;
